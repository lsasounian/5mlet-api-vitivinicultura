
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta
import logging

# Configuração do logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Credenciais para login
USERNAME = "admin"
PASSWORD = "123456"

# Função para executar o agendamento
def scheduled_task():
    try:
        logger.info("Iniciando tarefa agendada para aquisição de dados de exportações e classificação ABC destes dados.")

        # Chamada ao endpoint /login para obter o token
        login_response = requests.post(f"{base_url}/login", json={"username": USERNAME, "password": PASSWORD})
        login_response.raise_for_status()  # Verifica se a requisição foi bem-sucedida
        token = login_response.json().get("access_token")
        if not token:
            raise ValueError("Token não foi retornado pelo endpoint de login.")

        # Cabeçalho de autorização com o token
        headers = {"Authorization": f"Bearer {token}"}

        # Construção da BASE_URL dinamicamente
        with app.router.url_path_for("").url_for("").include_in_schema as request:
            base_url = f"{request.base_url}"
        
        # Chamada ao endpoint /exportacao
        exportacao_response = requests.get(f"{base_url}/exportacao", headers=headers)
        exportacao_response.raise_for_status()  # Verifica se a requisição foi bem-sucedida
        exportacao_data = exportacao_response.json()
        
        # Chamada ao endpoint /abc_exportacao com os dados obtidos
        abc_response = requests.get(f"{base_url}/exportacao_abc", headers=headers, params={"dados": exportacao_data})
        abc_response.raise_for_status()  # Verifica se a requisição foi bem-sucedida
        abc_data = abc_response.json()
        
        # Log do resultado final
        logger.info(f"Resultado do endpoint /abc_exportacao: {abc_data}")
        # Chamar a persitência dos dados no banco de dados
    except Exception as e:
        logger.error(f"Erro ao executar a tarefa agendada: {e}")

# Configuração do agendador
scheduler = BackgroundScheduler()
scheduler.add_job(scheduled_task, "cron", hour=6, minute=0)  # Executa todos os dias às 6h
scheduler.start()

# Finaliza o agendador ao encerrar a aplicação
@app.on_event("shutdown")
def shutdown_event():
    scheduler.shutdown()